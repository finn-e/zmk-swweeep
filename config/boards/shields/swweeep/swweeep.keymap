
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUNC    3
#define MEDIA   4
#define MOUSE   5
#define WINNAV  6

#define AS(keycode) &as LS(keycode) keycode

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC DEL>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_N1 {
            timeout-ms = <50>;
            key-positions = <0 10>;
            bindings = <&kp N1>;
        };
        combo_N2 {
            timeout-ms = <50>;
            key-positions = <1 11>;
            bindings = <&kp N2>;
        };
        combo_N3 {
            timeout-ms = <50>;
            key-positions = <2 12>;
            bindings = <&kp N3>;
        };
        combo_N4 {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&kp N4>;
        };
        combo_N5 {
            timeout-ms = <50>;
            key-positions = <4 14>;
            bindings = <&kp N5>;
        };
        combo_N6 {
            timeout-ms = <50>;
            key-positions = <5 15>;
            bindings = <&kp N6>;
        };
        combo_N7 {
            timeout-ms = <50>;
            key-positions = <6 16>;
            bindings = <&kp N7>;
        };
        combo_N8 {
            timeout-ms = <50>;
            key-positions = <7 17>;
            bindings = <&kp N8>;
        };
        combo_N9 {
            timeout-ms = <50>;
            key-positions = <8 18>;
            bindings = <&kp N9>;
        };
        combo_N0 {
            timeout-ms = <50>;
            key-positions = <9 19>;
            bindings = <&kp N0>;
        };

        combo_exclamation {
            timeout-ms = <50>;
            key-positions = <10 20>;
            bindings = <&kp EXCL>;
        };
        combo_at {
            timeout-ms = <50>;
            key-positions = <11 21>;
            bindings = <&kp AT>;
        };
        combo_hash {
            timeout-ms = <50>;
            key-positions = <12 22>;
            bindings = <&kp HASH>;
        };
        combo_dollar {
            timeout-ms = <50>;
            key-positions = <13 23>;
            bindings = <&kp DLLR>;
        };
        combo_percent {
            timeout-ms = <50>;
            key-positions = <14 24>;
            bindings = <&kp CARET>;
        };
        combo_caret {
            timeout-ms = <50>;
            key-positions = <15 25>;
            bindings = <&kp CARET>;
        };
        combo_ampersand {
            timeout-ms = <50>;
            key-positions = <16 26>;
            bindings = <&kp AMPS>;
        };
        combo_asterisk {
            timeout-ms = <50>;
            key-positions = <17 27>;
            bindings = <&kp ASTRK>;
        };
        combo_leftparen {
            timeout-ms = <50>;
            key-positions = <18 28>;
            bindings = <&kp LPAR>;
        };
        combo_rightparen {
            timeout-ms = <50>;
            key-positions = <19 29>;
            bindings = <&kp RPAR>;
        };

        combo_less {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp LT>;
        };
        combo_plus {QMARK
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp PLUS>;
        };
        combo_minus {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp MINUS>;
        };
        combo_lbrace {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp LBRC>;
        };
        combo_rbrace {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp RBRC>;
        };
        combo_multiply {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp STAR>;
        };
        combo_divide {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp FSLH>;
        };
        combo_more {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp GT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp LGUI>;
        };
        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        combo_lcontrol {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LCTRL>;
        };
        combo_lshift {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp LSHIFT>;
        };
        combo_rshift {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp RSHIFT>;
        };
        combo_rcontrol {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RCTRL>;
        };
        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp LALT>;
        };
        combo_rgui{
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp RGUI>;
        };

        combo_cut {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp LC(X)>;
        };
        combo_copy {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LC(C)>;
        };
        combo_paste {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp LC(V)>;
        };
        combo_lbraket {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp LBKT>;
        };
        combo_rbraket {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp RBKT>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp EQUAL>;
        };
        combo_undo {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp LC(Z)>;
        };
        combo_redo {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp LS(LC(Z))>;
        };

        combo_pipe{
            timeout-ms = <50>;
            key-positions = <10 13>;
            bindings = <&kp PIPE>;
        };
        combo_tilde {
            timeout-ms = <50>;
            key-positions = <10 12>;
            bindings = <&kp TILDE>;
        };
        combo_backslash {
            timeout-ms = <50>;
            key-positions = <11 13>;
            bindings = <&kp BSLH>;
        };
        combo_colon {
            timeout-ms = <50>;
            key-positions = <16 18>;
            bindings = <&kp COLON>;
        };
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <16 19>;
            bindings = <&kp SEMI>;
        };
        combo_grave {
            timeout-ms = <50>;
            key-positions = <17 19>;
            bindings = <&kp GRAVE>;
        };

    };
};

/ {

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mt LSHIFT LS(&kp)>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Default";

            bindings = <
    
    AS(COMMA)  AS(Q)     AS(U)       AS(DOT)        AS(SQT)                                          AS(K)         AS(G)            AS(H)         AS(C)     AS(W)
    AS(A)      AS(O)     AS(E)       AS(I)          AS(P)                                            AS(M)         AS(T)            AS(N)         AS(S)     AS(R)
    AS(SLASH)  AS(X)     AS(Z)       AS(Y)          AS(J)                                            AS(B)         AS(D)            AS(L)         AS(F)     AS(V)
                                     &lt WINNAV ESC &lt NUM SPACE  &lt FUNC TAB  &lt MOUSE RETURN    &lt SYM BKSP  &lt MEDIA DEL
            >;
        };

        num_layer {
            label = "Numbers";

            bindings = <
    &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                                        &kp N6    &kp N7    &kp N8    &kp N9    &kp N0
    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &kp PG_UP                                     &kp FSLH  &kp N4    &kp N5    &kp N6    &kp PLUS
    &kp HOME  &kp UNDER &kp MINUS &kp END   &kp PG_DN                                     &kp ASTRK &kp N1    &kp N2    &kp N3    &kp EQUAL
                                  &kp ESC   &trans    &kp TAB                  &kp RET    &kp N0    &kp DOT
            >;
        };

        sym_layer {
            label = "Symbols";

            bindings = <
    &kp EXCL     &kp AT       &kp HASH    &kp DLLR      &kp PRCNT                                   &kp CARET     &kp AMPS       &kp ASTRK     &kp LPAR    &kp RPAR
    &kp CAPS     &kp HOME     &kp UP      &kp END       &kp LBRC                                    &kp RBRC      &kp DLLR       &kp PRCNT     &kp CARET   &kp EQUAL
    &caps_word   &kp LEFT     &kp DOWN    &kp RIGHT     &kp LBKT                                    &kp RBKT      &kp EXCL       &kp AT        &kp HASH    &tog SYM
                                          &kp ESC       &kp SPACE      &kp TAB        &kp RET       &trans        &kp DEL
            >;
        };

        func_layer {
            label = "Function";

            bindings = <
    &kp F1               &kp F2               &kp F3             &kp F4                &kp F5                                          &kp F6           &kp F7       &kp F8        &kp F9      &kp F10
    &kp LG(LC(LEFT))     &kp LG(LC(DOWN))     &kp LG(LC(UP))     &kp LG(LC(RIGHT))     &kp ESC                                         &kp C_VOL_UP     &kp F4       &kp F5        &kp F6      &kp F11
    &kp LS(LG(LC(LEFT))) &kp LS(LG(LC(DOWN))) &kp LS(LG(LC(UP))) &kp LS(LG(LC(RIGHT))) &kp ESC                                         &kp C_VOL_DN     &kp F1       &kp F2        &kp F3      &kp F12
                                                                 &kp ESC               &kp SPACE          &trans      &kp RET          &kp BSPC              &kp DEL
            >;
        };

        media_layer {
            label = "Media";

            bindings = <
    &bootloader      &sys_reset       &bt BT_PRV       &bt BT_NXT        &bt BT_CLR                               &kp C_VOL_UP   &kp C_NEXT        &kp C_PREV         &kp C_BRI_UP   &trans
    &bt BT_SEL 4     &bt BT_SEL 3     &bt BT_SEL 2     &bt BT_SEL 1      &bt BT_SEL 0                             &kp C_VOL_DN   &kp C_PLAY_PAUSE  &kp C_MUTE         &kp C_BRI_DN   &kp C_BKLT_TOG
    &trans           &trans           &trans           &trans            &trans                                   &trans         &trans            &trans             &trans         &trans
                                                       &out OUT_USB      &out OUT_BLE     &kp TAB     &kp RET     &kp BSPC       &trans
            >;
        };

        mouse_layer {
            label = "Mouse";

            bindings = <
    &trans      &trans      &trans      &trans      &trans                               &trans       &trans      &trans      &trans      &trans
    &trans      &trans      &trans      &trans      &trans                               &trans       &trans      &trans      &trans      &trans
    &trans      &trans      &trans      &trans      &trans                               &trans       &trans      &trans      &trans      &trans
                                        &kp ESC     &kp SPACE     &kp TAB     &trans     &kp BSPC     &kp DEL
            >;
        };

        winnav_layer {
            label = "Win Navigation";

            bindings = <
    &kp LS(LEFT)     &kp LS(DOWN)     &kp LS(UP)      &kp LS(RIGHT)     &kp LC(A)                           &bt BT_CLR       &bt BT_PRV       &bt BT_NXT       &sys_reset       &bootloader
    &kp LG(LEFT)     &kp LG(DOWN)     &kp LG(UP)      &kp LG(RIGHT)     &kp LG(PG_UP)                       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4
    &kp LC(LEFT)     &kp LC(DOWN)     &kp LC(UP)      &kp LC(RIGHT)     &kp LC(Z)                           &trans           &trans           &trans           &trans           &trans
                                                      &trans            &kp SPACE     &kp TAB    &kp RET    &out OUT_BLE     &out OUT_USB
            >;
        };
    };
};
